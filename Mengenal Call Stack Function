Faktanya Javascript Itu Single Thread

==============================================

Secara sederhana, single-thread dalam konteks pemrograman berarti bahwa program hanya memiliki satu alur eksekusi (thread) pada waktu tertentu.

1. Contoh menggunakan Callback:

// Fungsi simulasi operasi asinkron
function fetchData(callback) {
	setTimeout(() => {
	  const data = { id: 1, name: 'John Doe' };
	  callback(data);
	}, 2000);
  }
  
  // Pemanggilan fungsi asinkron
  console.log('Memulai pengambilan data...');
  fetchData((data) => {
	console.log('Data yang diterima:', data);
  });
  console.log('Selesai pemanggilan fungsi');

===========================================================

Contoh menggunakan Promise:

// Fungsi simulasi operasi asinkron
function fetchData() {
	return new Promise((resolve, reject) => {
	  setTimeout(() => {
		const data = { id: 1, name: 'John Doe' };
		resolve(data);
	  }, 2000);
	});
  }
  
  // Pemanggilan fungsi asinkron
  console.log('Memulai pengambilan data...');
  fetchData()
	.then((data) => {
	  console.log('Data yang diterima:', data);
	})
	.catch((error) => {
	  console.error('Terjadi kesalahan:', error);
	})
	.finally(() => {
	  console.log('Selesai pemanggilan fungsi');
	});

============================================================

Contoh menggunakan Async/Await:

// Fungsi simulasi operasi asinkron
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const data = { id: 1, name: 'John Doe' };
      resolve(data);
    }, 2000);
  });
}

// Fungsi asinkron menggunakan Async/Await
async function processData() {
  console.log('Memulai pengambilan data...');
  try {
    const data = await fetchData();
    console.log('Data yang diterima:', data);
  } catch (error) {
    console.error('Terjadi kesalahan:', error);
  } finally {
    console.log('Selesai pemanggilan fungsi');
  }
}

processData();


==========================================================

